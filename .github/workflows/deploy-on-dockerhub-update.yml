name: Deploy on Docker Hub image update

on:
  schedule:
    - cron: "0 */2 * * *" # Every 2 hours
  workflow_dispatch:

jobs:
  check-and-deploy:
    name: Check Docker image digest and deploy if updated
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-group
      cancel-in-progress: true

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore last deployed digest from cache
        id: restore_digest
        uses: actions/cache@v4
        with:
          path: last-deployed-digest.txt
          key: last-deployed-digest-key

      - name: Get current Docker image digest
        id: get_digest
        run: |
          IMAGE="librebooking/librebooking"
          TAG="develop"

          # Get digest from Docker Hub
          DIGEST=$(curl -s "https://registry.hub.docker.com/v2/repositories/${IMAGE}/tags/${TAG}" | jq -r '.images[0].digest')

          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "$DIGEST" > current-digest.txt

      - name: Compare with cached digest
        id: compare
        run: |
          echo "Previous digest:"
          cat last-deployed-digest.txt || echo "none"
          echo "Current digest:"
          cat current-digest.txt

          if cmp -s current-digest.txt last-deployed-digest.txt; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: false

      - name: Setup Fly.io CLI
        if: steps.compare.outputs.changed == 'true'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        if: steps.compare.outputs.changed == 'true'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Update cached digest
        if: steps.compare.outputs.changed == 'true'
        run: |
          cp current-digest.txt last-deployed-digest.txt

      - name: Echo deploy summary
        if: steps.compare.outputs.changed == 'true'
        run: |
          echo "âœ… Deployed image with digest: ${{ steps.get_digest.outputs.digest }}"